/**
 * COUNTER_SUSHI5_0 API
 * The COUNTER_SUSHI5_0 API represents a RESTful implementation of SUSHI automation intended to returns COUNTER Release 5 reports and snippets of COUNTER usage in JSON format
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nisohq@niso.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/COUNTERDatabaseReport', 'model/COUNTERItemReport', 'model/COUNTERPlatformReport', 'model/COUNTERTitleReport', 'model/SUSHIConsortiumMemberList', 'model/SUSHIErrorModel', 'model/SUSHIReportList', 'model/SUSHIServiceStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/COUNTERDatabaseReport'), require('../model/COUNTERItemReport'), require('../model/COUNTERPlatformReport'), require('../model/COUNTERTitleReport'), require('../model/SUSHIConsortiumMemberList'), require('../model/SUSHIErrorModel'), require('../model/SUSHIReportList'), require('../model/SUSHIServiceStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.CounterSushi50Api) {
      root.CounterSushi50Api = {};
    }
    root.CounterSushi50Api.DefaultApi = factory(root.CounterSushi50Api.ApiClient, root.CounterSushi50Api.COUNTERDatabaseReport, root.CounterSushi50Api.COUNTERItemReport, root.CounterSushi50Api.COUNTERPlatformReport, root.CounterSushi50Api.COUNTERTitleReport, root.CounterSushi50Api.SUSHIConsortiumMemberList, root.CounterSushi50Api.SUSHIErrorModel, root.CounterSushi50Api.SUSHIReportList, root.CounterSushi50Api.SUSHIServiceStatus);
  }
}(this, function(ApiClient, COUNTERDatabaseReport, COUNTERItemReport, COUNTERPlatformReport, COUNTERTitleReport, SUSHIConsortiumMemberList, SUSHIErrorModel, SUSHIReportList, SUSHIServiceStatus) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAPIStatus operation.
     * @callback module:api/DefaultApi~getAPIStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SUSHIServiceStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns the current status of the reporting service supported by this API.
     * @param {String} customerId Identifies the customer to provide report data for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the report data is being requested for.  This can be omitted if the service provides report data for only one platform.
     * @param {module:api/DefaultApi~getAPIStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SUSHIServiceStatus>}
     */
    this.getAPIStatus = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getAPIStatus");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SUSHIServiceStatus];

      return this.apiClient.callApi(
        '/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsortiumMembers operation.
     * @callback module:api/DefaultApi~getConsortiumMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SUSHIConsortiumMemberList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns the list of consortium members related to a Customer_ID.
     * @param {String} customerId Identifies the customer to provide report data for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the report data is being requested for.  This can be omitted if the service provides report data for only one platform.
     * @param {module:api/DefaultApi~getConsortiumMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SUSHIConsortiumMemberList>}
     */
    this.getConsortiumMembers = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getConsortiumMembers");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SUSHIConsortiumMemberList];

      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:api/DefaultApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SUSHIReportList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns a list of reports supported by the API for a given application.
     * @param {String} customerId Identifies the customer to provide report data for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform The name of the Platform the report data is being requested for.  This can be omitted if the service provides report data for only one platform.
     * @param {String} opts.search Keyword search filtered against report name. Allows for searching for a report by name.
     * @param {module:api/DefaultApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SUSHIReportList>}
     */
    this.getReports = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReports");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SUSHIReportList];

      return this.apiClient.callApi(
        '/reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsDR1 operation.
     * @callback module:api/DefaultApi~getReportsDR1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERDatabaseReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Database Search and Item Usage&#39; [DR_D1], a Standard View of Database Master Report. Reports on key search and request metrics needed to evaluate a database.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsDR1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERDatabaseReport>}
     */
    this.getReportsDR1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsDR1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsDR1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsDR1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERDatabaseReport];

      return this.apiClient.callApi(
        '/reports/dr_d1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsDR2 operation.
     * @callback module:api/DefaultApi~getReportsDR2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERDatabaseReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Database Access Denied&#39; [DR_D2], a Standard View of Database Master Report. Reports on Access Denied activity for databases where users were denied access because simultaneous use licenses were exceeded or their institution did not have a license for the database.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsDR2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERDatabaseReport>}
     */
    this.getReportsDR2 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsDR2");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsDR2");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsDR2");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERDatabaseReport];

      return this.apiClient.callApi(
        '/reports/dr_d2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsDRx operation.
     * @callback module:api/DefaultApi~getReportsDRxCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERDatabaseReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Database Master Report&#39; [DR]. A customizable report detailing activity by database that allows the user to apply filters and select other configuration options for the report.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {String} opts.database Name of a specific database usage is being requested for. If omitted, all databases on the platform with usage for the requested customer will be returned
     * @param {String} opts.metricType A report filter. A list of Metric_Types to return. Specify multiple values by delimiting with a | character.  Omitting this parameter will return all metric_types with statistics. 
     * @param {String} opts.accessType A Report Filter. A list of Access_Types to return delimited with a | character.
     * @param {String} opts.accessMethod A Report Filter. A list of Access_Methods to return delimited with a | character.
     * @param {String} opts.yop A Report Filter. A list or range of years of publication to return in response in format of yyyy|yyyy|yyyy-yyyy. Note that 0001 &#x3D; unknown and 9999 &#x3D; articles in press
     * @param {String} opts.attributesToShow A Report Attribute. A list of attributes to include as separate elements in response (usage will be broken out by attribute values).  Multiple attribute names are delimited with a | character. Options include Access_Type, Access_Method and YOP. When fields are included usage will be presented for each value of that field (with usage) otherwise usage will be rolled up for all values of a given field.
     * @param {Boolean} opts.excludeReportHeader Optional Report Attribute. Include this parameter with a value of &#39;true&#39; to exclude the SUSHI Report_Header should be excluded with the response. Omitting the parameter will include the Report_Header.
     * @param {module:api/DefaultApi~getReportsDRxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERDatabaseReport>}
     */
    this.getReportsDRx = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsDRx");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsDRx");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsDRx");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
        'database': opts['database'],
        'metric_type': opts['metricType'],
        'access_type': opts['accessType'],
        'access_method': opts['accessMethod'],
        'yop': opts['yop'],
        'attributes_to_show': opts['attributesToShow'],
        'exclude_report_header': opts['excludeReportHeader'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERDatabaseReport];

      return this.apiClient.callApi(
        '/reports/dr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsIR operation.
     * @callback module:api/DefaultApi~getReportsIRCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERItemReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Item Master Report&#39;  [IR].
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {String} opts.itemId Optional Report Filter. Identifier of a specific title usage is being requested for.  If omitted, all databases on the platform with usage for the requested customer will be returned
     * @param {String} opts.itemContributor Optional Report Filter. Identifier of a specific contributor (i.e. author) usage is being requested for.  If omitted, all databases on the platform with usage for the requested customer will be returned
     * @param {String} opts.metricType Optional Report Filter. A list of Metric_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all metric_types with statistics.
     * @param {String} opts.dataType Optional Report Filter. A list of Data_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all Data_Types with statistics. 
     * @param {String} opts.sectionType Optional Report Filter.  A list of Data_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all Section_Types with statistics.
     * @param {String} opts.yop Optional Report Filter. A list or range of years of publication to return in response in format of yyyy|yyyy|yyyy-yyyy. Note that 0001 &#x3D; unknown and 9999 &#x3D; articles in press
     * @param {String} opts.accessType Optional Report Filter. A list of Access_Types to return usage for -- delimited with a | character.
     * @param {String} opts.accessMethod Optional Report Filter. A list of Access_Methods to return usage for --  delimited with a | character.
     * @param {String} opts.attributesToShow Optional Report Attribute. A list of attributes to include as separate elements in response (usage will be broken out by attribute values).  Multiple attribute names are delimited with a | character. Options include Access_Type, Access_Method and YOP. When fields are  included usage will be presented for each value of that field (with usage) otherwise usage will be rolled up for all values of a given field.
     * @param {String} opts.includeItemComponents Optional Report Attribute. Include this parameter to include ItemComponent details in the report. Omitting the parameter will exclude the ItemComponent elements.
     * @param {Boolean} opts.excludeReportHeader Optional Report Attribute. Include this parameter with a value of &#39;true&#39; to exclude the SUSHI Report_Header should be excluded with the response. Omitting the parameter will include the Report_Header.
     * @param {module:api/DefaultApi~getReportsIRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERItemReport>}
     */
    this.getReportsIR = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsIR");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsIR");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsIR");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
        'item_id': opts['itemId'],
        'item_contributor': opts['itemContributor'],
        'metric_type': opts['metricType'],
        'data_type': opts['dataType'],
        'section_type': opts['sectionType'],
        'yop': opts['yop'],
        'access_type': opts['accessType'],
        'access_method': opts['accessMethod'],
        'attributes_to_show': opts['attributesToShow'],
        'include_item_components': opts['includeItemComponents'],
        'exclude_report_header': opts['excludeReportHeader'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERItemReport];

      return this.apiClient.callApi(
        '/reports/ir', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsIRA1 operation.
     * @callback module:api/DefaultApi~getReportsIRA1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns &#39;Journal Article Requests&#39; [IR_A1], a Standard View of Item Master Report. Reports on journal article requests at the article level. This report is limited to content with a Data_Type of Journal; Section_Type of Article and metric types of Total_Item_Requests and Unique_Item_Requests.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsIRA1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsIRA1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsIRA1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsIRA1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsIRA1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/ir_a1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsIRM1 operation.
     * @callback module:api/DefaultApi~getReportsIRM1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns &#39;Multimedia Item Requests&#39; [IR_M1], a Standard View of Item Master Report. Reports on multimedia requests at the item level.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsIRM1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsIRM1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsIRM1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsIRM1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsIRM1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/ir_m1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsPR operation.
     * @callback module:api/DefaultApi~getReportsPRCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERPlatformReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Platform Master Report&#39; [PR]. A customizable report summarizing activity across a provider’s platforms that allows the user to apply filters and select other configuration options for the report.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {String} opts.metricType Optional Report Filter. A list of Metric_Types to return. Specify multiple values by delimiting with a | character.  Omitting this parameter will return all metric_types with statistics. 
     * @param {String} opts.accessType Optional Report Filter. A list of Access_Types to return delimited with a | character. Omitting this parameter will return all access_types with statistics.
     * @param {String} opts.accessMethod Optional Report Filter. A list of Access_Methods to return delimited with a | character. Omitting this parameter will return all access_methods with statistics.
     * @param {String} opts.yop Optional Report Filter. A list or range of years of publication to return in response in format of yyyy|yyyy|yyyy-yyyy. Note that 0001 &#x3D; unknown and 9999 &#x3D; articles in press.
     * @param {String} opts.attributesToShow Optional Report Attribute. A list of attributes to include as separate elements in response (usage will be broken out by attribute values).  Multiple attribute names are delimited with a | character. Options include Access_Type, Access_Method and YOP. When fields are included usage will be presented for each value of that field (with     usage) otherwise usage will be rolled up for all values of a given field.
     * @param {Boolean} opts.excludeReportHeader Optional Report Attribute. Include this parameter with a value of &#39;true&#39; to exclude the SUSHI Report_Header should be excluded with the response. Omitting the parameter will include the Report_Header.
     * @param {module:api/DefaultApi~getReportsPRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERPlatformReport>}
     */
    this.getReportsPR = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsPR");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsPR");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsPR");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
        'metric_type': opts['metricType'],
        'access_type': opts['accessType'],
        'access_method': opts['accessMethod'],
        'yop': opts['yop'],
        'attributes_to_show': opts['attributesToShow'],
        'exclude_report_header': opts['excludeReportHeader'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERPlatformReport];

      return this.apiClient.callApi(
        '/reports/pr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsPR1 operation.
     * @callback module:api/DefaultApi~getReportsPR1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERPlatformReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Platform Usage&#39; [pr_p1]. This is a Standard View of the Package Master Report that presents usage for the overall Platform broken down by Metric_Type.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsPR1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERPlatformReport>}
     */
    this.getReportsPR1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsPR1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsPR1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsPR1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERPlatformReport];

      return this.apiClient.callApi(
        '/reports/pr_p1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTR operation.
     * @callback module:api/DefaultApi~getReportsTRCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;TItle Master Report&#39; [TR]. A customizable report detailing activity at the title level (journal, book, etc.) that allows the user to apply filters and select other configuration options for the report.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {String} opts.itemId Identifier of a specific title usage is being requested for.  If omitted, all databases on the platform with usage for the requested customer will be returned
     * @param {String} opts.itemContributor Identifier of a specific contributor (i.e. author) usage is being requested for.  If omitted, all databases on the platform with usage for the requested customer will be returned
     * @param {String} opts.metricType A Report Filter. A list of Metric_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all metric_types with statistics.
     * @param {String} opts.dataType A Report Filter. A list of Data_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all Data_Types with statistics. 
     * @param {String} opts.sectionType A Report Filter. A list of Data_Types to return usage for.  Use | character to delimit multiple values. Omit this parameter to include all Section_Types with statistics.
     * @param {String} opts.yop A Report Filter. A list or range of years of publication to return in response in format of yyyy|yyyy|yyyy-yyyy. Note that 0001 &#x3D; unknown and 9999 &#x3D; articles in press
     * @param {String} opts.accessType A Report Filter. A list of Access_Types to return usage for -- delimited with a | character.
     * @param {String} opts.accessMethod A Report Filter. A list of Access_Methods to return usage for --  delimited with a | character.
     * @param {String} opts.attributesToShow A Report Attribute. A list of attributes to include as separate elements in response (usage will be broken out by attribute values).  Multiple attribute names are delimited with a | character.  Options include Access_Type, Access_Method and YOP. When fields are included usage will be presented for each value of that field (with usage) otherwise usage will be rolled up for all values of a given field.
     * @param {Boolean} opts.excludeReportHeader Optional Report Attribute. Include this parameter with a value of &#39;true&#39; to exclude the SUSHI Report_Header should be excluded with the response. Omitting the parameter will include the Report_Header.
     * @param {module:api/DefaultApi~getReportsTRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTR = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTR");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTR");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTR");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
        'item_id': opts['itemId'],
        'item_contributor': opts['itemContributor'],
        'metric_type': opts['metricType'],
        'data_type': opts['dataType'],
        'section_type': opts['sectionType'],
        'yop': opts['yop'],
        'access_type': opts['accessType'],
        'access_method': opts['accessMethod'],
        'attributes_to_show': opts['attributesToShow'],
        'exclude_report_header': opts['excludeReportHeader'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRB1 operation.
     * @callback module:api/DefaultApi~getReportsTRB1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER Book Requests (Excluding OA_Gold) [TR_B1], a Standard View of Title Master Report. Reports on full text activity for non-Gold Open Access books as “Total_Item_Requests” and “Unique_Title_Requests”.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRB1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRB1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRB1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRB1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRB1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_b1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRB2 operation.
     * @callback module:api/DefaultApi~getReportsTRB2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Access Denied by Book&#39;[TR_B2], a Standard View of Title Master Report. Reports on Access Denied activity for books where users were denied access because simultaneous use licenses were exceeded or their institution did not have a license for the book.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRB2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRB2 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRB2");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRB2");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRB2");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_b2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRB3 operation.
     * @callback module:api/DefaultApi~getReportsTRB3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Access Denied by Book&#39;[TR_B2], a Standard View of Title Master Report. Reports on book usage showing all applicable metric types broken down by Access_Type.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRB3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRB3 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRB3");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRB3");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRB3");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_b3', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRJ1 operation.
     * @callback module:api/DefaultApi~getReportsTRJ1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns COUNTER &#39;Journal Requests (Excluding OA_Gold)&#39; [TR_J1], a Standard View of Title Master Report. Reports on usage of non-Gold Open Access journal content as “Total_Item_Requests” and “Unique_Item_Requests”. 
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRJ1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRJ1 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRJ1");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRJ1");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRJ1");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_j1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRJ2 operation.
     * @callback module:api/DefaultApi~getReportsTRJ2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns &#39;Access Denied by Journal&#39; [TR_J2], a Standard View of Title Master Report. Reports on Access Denied activity for journal content where users were denied access because simultaneous use licenses were exceeded or their institution did not have a license for the title.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRJ2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRJ2 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRJ2");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRJ2");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRJ2");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_j2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRJ3 operation.
     * @callback module:api/DefaultApi~getReportsTRJ3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns &#39;Journal Usage by Access Type &#39; [TR_J3], a Standard View of Title Master Report. Reports on usage of journal content for all metric types broken down by Access Type.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRJ3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRJ3 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRJ3");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRJ3");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRJ3");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_j3', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsTRJ4 operation.
     * @callback module:api/DefaultApi~getReportsTRJ4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/COUNTERTitleReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns \&quot;Journal Requests by YOP (Excluding OA_Gold)\&quot; [TR_J4], a Standard View of Title Master Report. Breaks down the usage of non-Gold Open Access journal content by year of publication (YOP) providing counts for the metric types \&quot;Total_Item_Requests\&quot; and \&quot;Unique_Item_Requests\&quot;.
     * @param {String} customerId Identifies the customer to provide usage for.
     * @param {String} beginDate Usage start date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {String} endDate Usage end date in the form of yyyy-mm-dd or yyyy-mm.
     * @param {Object} opts Optional parameters
     * @param {String} opts.platform Name of the Platform the usage is being requested for.  This can be omitted if the service provides usage for only one platform.
     * @param {module:api/DefaultApi~getReportsTRJ4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/COUNTERTitleReport>}
     */
    this.getReportsTRJ4 = function(customerId, beginDate, endDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getReportsTRJ4");
      }

      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling getReportsTRJ4");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getReportsTRJ4");
      }


      var pathParams = {
      };
      var queryParams = {
        'customer_id': customerId,
        'platform': opts['platform'],
        'begin_date': beginDate,
        'end_date': endDate,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey', 'requestor_id'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [COUNTERTitleReport];

      return this.apiClient.callApi(
        '/reports/tr_j4', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
